{"version":3,"sources":["BarChart.js","App.js","TimeChart.js","Time.js","serviceWorker.js","index.js"],"names":["BarChart","chartRef","React","createRef","state","casesList","country","language","phrases","phrase","document","title","fetch","headers","process","REACT_APP_API_KEY","then","results","json","data","countriesList","countries_stat","map","c","push","cases","replace","country_name","deaths","total_recovered","new_deaths","new_cases","active_cases","drawChartJS","setState","this","renderTableData","undefined","window","location","href","alert","errorMsg","str","orderBy","myChartRef","current","getContext","deathList","countryList","caseList","todayDeathsList","todayCasesList","activeList","recoveredList","sort","a","b","parseInt","active","recovered","todayCases","todayDeaths","i","length","toLowerCase","includes","datasetBars","index","lang","dataType","label","totalDeaths","type","backgroundColor","borderColor","fill","totalCases","labels","myChart","destroy","Chart","datasets","options","maintainAspectRatio","responsive","canvas","parentNode","style","height","className","onChange","e","changeLanguage","target","value","placeholder","onClick","getTimeline","id","ref","Component","App","TimeChart","opts","setCountry","stat_by_country","total_cases","total_deaths","record_date","props","countries","forEach","key","selected","timelist","Date","date","time","mo","Intl","DateTimeFormat","year","format","month","da","day","getAllCountries","Time","match","params","Boolean","hostname","routing","exact","path","component","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.4966498a.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport Chart from \"chart.js\";\n\n\nclass BarChart extends Component {\n    myChart;\n    chartRef = React.createRef();\n    constructor(){\n        super();\n        this.state={\n            casesList:[],\n            country: null,\n            language: 'en',\n            phrases: [{\"lang\": \"mk\",\"language\": \"Јазик\",\"country\":\"Држава\", \"title\": \"Корона Статистика\", \"errorMsg\":\"Ве молиме, внесете држава.\", \"totalCases\":\"Вкупно случаи\", \"totalDeaths\":\"Вкупно смртни случаи\", \"active\":\"Активни\",\"recovered\":\"Излечени\",\"todayCases\":\"Денешни случаи\",\"todayDeaths\":\"Денешни смртни случаи\"}, {\"lang\":\"en\",\"totalCases\":\"Total cases\", \"totalDeaths\": \"Total deaths\", \"active\":\"Active\",\"recovered\":\"Recovered\",\"todayCases\":\"Today cases\",\"todayDeaths\":\"Today deaths\",  \"errorMsg\":\"Please, input a country.\",\"title\":\"Coronavirus Statistics\",\"language\": \"Language\",\"country\":\"Country\"}],\n            phrase: null\n        };\n        this.state.phrase = this.state.phrases[1];\n        document.title = this.state.phrase.title;\n    }\n    \n     renderTableData() {\n        fetch('https://coronavirus-monitor.p.rapidapi.com/coronavirus/cases_by_country.php',\n        {  \n            headers: {\n              'X-RapidAPI-Host': 'coronavirus-monitor.p.rapidapi.com', \n              'X-RapidAPI-Key': process.env.REACT_APP_API_KEY\n            }\n        })\n            .then(results=>{\n            return results.json();\n        })\n        .then(data => {\n            let casesList = [];\n            let countriesList = [];\n            data.countries_stat.map((c)=>{\n                return(\n                    casesList.push({\"cases\": c.cases.replace(',',''), \"country\":c.country_name, \"deaths\":c.deaths.replace(',',''), \"recovered\":c.total_recovered.replace(',',''), \"todayDeaths\":c.new_deaths.replace(',',''), \"todayCases\":c.new_cases.replace(',',''), \"active\":c.active_cases.replace(',','')}),\n                    countriesList.push(c.country_name)\n                )\n            });\n            this.drawChartJS(casesList);            \n            this.setState({casesList: casesList});\n        })\n     }\n     componentDidMount() {\n      this.renderTableData();\n    }\n    getTimeline()\n    {\n        if(this.state.country !== undefined && this.state.country !== null)\n        {\n            window.location.href = '/timechart/country/'+this.state.country;\n        }\n        else{\n            alert(this.state.phrase.errorMsg);\n        }\n    }\n    drawChartJS(casesList, str, orderBy){\n        if(str == null)\n        {\n            str=\"\";\n        }\n        const myChartRef = this.chartRef.current.getContext(\"2d\");\n        let deathList = [];\n        let countryList = [];\n        let caseList = [];\n        let todayDeathsList = [];\n        let todayCasesList = [];\n        let activeList = [];\n        let recoveredList = [];\n        \n        switch(orderBy){\n            case \"active\":\n                casesList.sort((a, b) => (parseInt(a.active) > parseInt(b.active)) ? -1 : 1);\n                break;\n            case \"recovered\":\n                casesList.sort((a, b) => (parseInt(a.recovered) > parseInt(b.recovered)) ? -1 : 1);\n                break;\n            case \"cases\":\n                casesList.sort((a, b) => (parseInt(a.cases) > parseInt(b.cases)) ? -1 : 1);\n                break;\n            case \"deaths\":\n                casesList.sort((a, b) => (parseInt(a.deaths) > parseInt(b.deaths)) ? -1 : 1);\n                break;\n            case \"todayCases\":\n                casesList.sort((a, b) => (parseInt(a.todayCases) > parseInt(b.todayCases)) ? -1 : 1);\n                break;\n            case \"todayDeaths\":\n                casesList.sort((a, b) => (parseInt(a.todayDeaths) > parseInt(b.todayDeaths)) ? -1 : 1);\n                break;\n            default:\n                casesList.sort((a, b) => (parseInt(a.cases) > parseInt(b.cases)) ? -1 : 1);\n                break;\n        }\n\n        for(let i = 0; i<casesList.length;i++)\n        {\n            if(casesList[i].country.toLowerCase().includes(str.toLowerCase())){\n                deathList.push(casesList[i].deaths);\n                countryList.push(casesList[i].country);\n                caseList.push(casesList[i].cases);\n                todayDeathsList.push(casesList[i].todayDeaths);\n                todayCasesList.push(casesList[i].todayCases);\n                activeList.push(casesList[i].active);\n                recoveredList.push(casesList[i].recovered)\n            }\n        }\n        if(str !== null && str !== \"\")\n        {\n            try{\n                this.setState({\n                    country:  countryList[0]\n                  })\n                //               this.state.country = countryList[0];\n            }\n            catch{}\n        }\n        let datasetBars = [];\n        let phrase = this.state.phrases[1];\n        for (let index = 0; index < this.state.phrases.length; index++) {\n            if(this.state.phrases[index].lang === this.state.language)\n            {\n                phrase = this.state.phrases[index];   \n            }\n        }\n//        this.state.phrase = phrase;\n        this.setState({\n            phrase:  phrase\n        })      \n        document.title = phrase.title;\n\n        let dataType = \"bar\";\n        if(str===\"\")\n        {\n            dataType = \"line\";\n        }\n        datasetBars = [{\n            label: phrase.totalDeaths,\n            type: dataType,\n            data: deathList,\n            backgroundColor: \"#7F171F\",\n            borderColor: \"#7F171F\",\n            fill: \"#7F171F\",\n          },\n        {                    \n            label: phrase.totalCases,\n            data: caseList,\n            type: dataType,\n            backgroundColor:\" #003366\",\n            borderColor:\" #003366\",\n            fill:\" #003366\",\n        },\n        {\n            label: phrase.todayCases,\n            type: dataType,\n            backgroundColor:\"#B67721\",\n            borderColor:\"#B67721\",\n            fill:\"#B67721\",\n            data: todayCasesList,\n        },\n        {\n            label: phrase.recovered,\n            type: dataType,\n            backgroundColor:\"#21B6A8\",\n            borderColor:\"#21B6A8\",\n            fill:\"#21B6A8\",\n            data: recoveredList,\n        },\n        {\n            label: phrase.todayDeaths,\n            type: dataType,\n            backgroundColor: \"#B6212D\",\n            borderColor: \"#B6212D\",\n            data: todayDeathsList,\n            labels: todayDeathsList\n        },\n        {\n            label: phrase.active,\n            type: dataType,\n            labels: activeList,\n            backgroundColor:\"#177F75\",\n            borderColor:\"#177F75\",\n            fill:\"#177F75\",\n            data: activeList,\n        }\n      ];\n        \n        try{\n            this.myChart.destroy();\n        }\n        catch{}\n\n      this.myChart = new Chart(myChartRef, {\n          type: \"bar\",\n          data: {\n              labels: countryList,\n              datasets: datasetBars\n          },\n          options: { \n              maintainAspectRatio: false,\n              responsive: true\n          }\n      });\n      this.myChart.canvas.parentNode.style.height = '90vh';\n    }\n    \n      async changeLanguage(lang) {\n        await this.setState({\n          language:  lang\n        })\n        this.drawChartJS(this.state.casesList);\n      }\n      getLang(){\n          return this.state.language;\n      }\n    render(){\n     return (\n     <div>\n    <h1>{this.state.phrase.title}</h1>\n     <div className=\"infoData\">\n         <div>\n         {this.state.phrase.language}\n         \n            <select className=\"infoChild\" onChange={(e)=>this.changeLanguage(e.target.value)}>\n                <option value=\"en\">English</option>\n                <option value=\"mk\">Македонски</option>\n            </select>\n            </div><div>\n            {this.state.phrase.country}\n            <input className=\"infoChild\" placeholder={this.state.language === 'en' ? 'Type a country' : 'Внесете држава'} onChange={(e) => this.drawChartJS(this.state.casesList, e.target.value)} ></input>\n            <input type=\"button\" className=\"infoChild\" onClick={(e) => this.getTimeline(this.state.casesList, e.target.value)} value={this.state.language === 'en' ? 'Chronological' : 'Хронолошки'} ></input>\n            </div><div>{this.state.language === 'en' ? 'Order by' : 'Сортирај по'}\n            <select className=\"infoChild\" onChange={(e)=>this.drawChartJS(this.state.casesList,\"\",e.target.value)}>\n                <option value=\"cases\">{this.state.phrase.totalCases}</option>\n                <option value=\"deaths\">{this.state.phrase.totalDeaths}</option>\n                <option value=\"todayCases\">{this.state.language==='en'? 'Number of today cases': 'Денешни случаи'}</option>\n                <option value=\"todayDeaths\">{this.state.language==='en'? 'Number of today deaths': 'Денешни смртни случаи'}</option>\n                <option value=\"active\">{this.state.language==='en'? 'Number of active cases': 'Активни случаи'}</option>\n                <option value=\"recovered\">{this.state.language==='en'? 'Number of recovered cases': 'Излечени случаи'}</option>\n            </select>\n            </div>\n            <div>\n            </div>\n        </div>\n            <canvas \n                id=\"myChart\"\n                ref={this.chartRef}\n            />\n        </div>\n    )\n    }\n  }\n      \n  export default BarChart;","import React , {Component} from 'react';\nimport './App.css';\nimport BarChart from './BarChart'\n\nclass App extends Component {\n  \n  render() {\n    return (\n      <div className=\"App\">\n        <BarChart/>\n      </div>\n    );\n  }\n}\nexport default App;\n","import React, {Component} from 'react';\nimport Chart from \"chart.js\";\n\n\nclass TimeChart extends Component {\n    myChart;\n    chartRef = React.createRef();\n    constructor(){\n        super();\n        this.state={\n            casesList:[],\n            country: null,\n            language: 'en',\n            phrase: null,\n            opts: [],\n            phrases: [{\"lang\": \"mk\",\"language\": \"Јазик\",\"country\":\"Држава\", \"title\": \"Корона Статистика\", \"errorMsg\":\"Ве молиме, внесете држава.\", \"totalCases\":\"Вкупно случаи\", \"totalDeaths\":\"Вкупно смртни случаи\", \"active\":\"Активни\",\"recovered\":\"Излечени\",\"todayCases\":\"Денешни случаи\",\"todayDeaths\":\"Денешни смртни случаи\"}, {\"lang\":\"en\",\"totalCases\":\"Total cases\", \"totalDeaths\": \"Total deaths\", \"active\":\"Active\",\"recovered\":\"Recovered\",\"todayCases\":\"Today cases\",\"todayDeaths\":\"Today deaths\",  \"errorMsg\":\"Please, input a country.\",\"title\":\"Coronavirus Statistics\",\"language\": \"Language\",\"country\":\"Country\"}],\n        };\n        this.setCountry();\n        \n        let phrase = this.state.phrases[1];\n        document.title = phrase.title;\n        this.state.phrase = phrase;\n\n    }\n    \n     renderTableData(country, orderBy) {\n         this.state.country = country;\n //       fetch('https://coronavirus-19-api.herokuapp.com/countries')\n        fetch('https://coronavirus-monitor.p.rapidapi.com/coronavirus/cases_by_particular_country.php?country='+country,\n        {  \n            headers: {\n              'X-RapidAPI-Host': 'coronavirus-monitor.p.rapidapi.com', \n              'X-RapidAPI-Key': process.env.REACT_APP_API_KEY\n            }\n        })\n            .then(results=>{\n            return results.json();\n        })\n        .then(data => {\n            \n            let casesList = [];\n            let countriesList = [];\n            data.stat_by_country.map((c)=>{\n                \n                try{\n                    c.total_cases = c.total_cases.replace(',','');\n                    c.total_deaths = c.total_deaths.replace(',','');\n                    c.total_recovered = c.total_recovered.replace(',','');\n                    c.new_deaths = c.new_deaths.replace(',','');\n                    c.new_cases = c.new_cases.replace(',','');\n                    c.active_cases = c.active_cases.replace(',','');\n                }catch{\n                    \n                }\n                return(\n                    casesList.push({\"cases\": c.total_cases, \"country\":c.country_name, \"deaths\":c.total_deaths, \"recovered\":c.total_recovered, \"todayDeaths\":c.new_deaths, \"todayCases\":c.new_cases, \"active\":c.active_cases, \"time\":c.record_date}),\n                    countriesList.push(c.country_name)\n                )\n            });\n            this.drawChartJS(casesList, \"\", orderBy);\n/*            data.stat_by_country.map((c)=>{  \n             return(\n                 <tr key={c.country_name}>\n                     <td>{c.country_name}</td>\n                     <td>{c.cases}</td>\n                     <td>{c.new_cases}</td>\n                     <td class=\"death\">{c.deaths}</td>\n                     <td>{c.new_deaths}</td>\n                     <td class=\"recovered\">{c.total_recovered}</td>\n                     <td>{c.active_cases}</td>\n                 </tr>\n                )\n            });*/   \n            \n            this.setState({casesList: casesList});\n        })\n     }\n     componentDidMount() {\n        this.renderTableData(this.props.country.country);  \n//        this.setCountry();    \n    }\n    getTimeline(orderBy)\n    {\n        if(this.state.country != undefined)\n        {        \n            this.renderTableData(this.state.country, orderBy);  \n        }\n        else{\n            alert(this.state.phrase.errorMsg);\n        }\n    }\n\n    setCountry()\n    {\n        let opts = []; \n        let countries = [];\n        fetch('https://coronavirus-monitor.p.rapidapi.com/coronavirus/cases_by_country.php',\n        {  \n            headers: {\n              'X-RapidAPI-Host': 'coronavirus-monitor.p.rapidapi.com', \n              'X-RapidAPI-Key': 'e9843df6f7mshaa54667ec07baf1p12224cjsn04cf86d86a81'\n            }\n        })\n            .then(results=>{\n            return results.json();\n        })\n        .then(data => {\n            data.countries_stat.map((c)=>{\n                countries.push(c.country_name);\n            });\n            countries.sort();\n            countries.forEach(c => {\n                if(this.props.country.country == c)\n                    {\n                        opts.push(<option key= {c} selected value={c}> {c} </option>);    \n                    }\n                    else{\n                        opts.push(<option key= {c} value={c}> {c} </option>); \n                    }\n            });\n            this.state.opts = opts;\n    \n        })   \n    }\n    drawChartJS(casesList, str, orderBy){\n        if(str == null)\n        {\n            str=\"\";\n        }\n        \n        const myChartRef = this.chartRef.current.getContext(\"2d\");\n        let deathList = [];\n        let countryList = [];\n        let timelist = [];\n        let caseList = [];\n        let todayDeathsList = [];\n        let todayCasesList = [];\n        let activeList = [];\n        let recoveredList = [];\n        \n        switch(orderBy){\n            case \"asc\":\n                casesList.sort((a, b) => (new Date(a)>new Date(b)) ? -1 : 1);\n                break;\n            case \"desc\":\n                casesList.sort((a, b) => (new Date(a)>new Date(b)) ? 1 : -1);\n                break;\n            default:\n                casesList.sort((a, b) => (new Date(a)>new Date(b)) ? -1 : 1);\n                break;\n        }\n\n        for(let i = 0; i<casesList.length;i++)\n        {\n            if(casesList[i].country.toLowerCase().includes(str.toLowerCase())){\n\n                let date = new Date(casesList[i].time);\n                const ye = new Intl.DateTimeFormat('en', { year: 'numeric' }).format(date)\n                const mo = new Intl.DateTimeFormat('en', { month: 'short' }).format(date)\n                const da = new Intl.DateTimeFormat('en', { day: '2-digit' }).format(date)\n\n                timelist.push(da+\".\"+mo);\n                if(true){\n                deathList.push(casesList[i].deaths);\n                countryList.push(casesList[i].country);\n                caseList.push(casesList[i].cases);\n                todayDeathsList.push(casesList[i].todayDeaths);\n                todayCasesList.push(casesList[i].todayCases);\n                activeList.push(casesList[i].active);\n                recoveredList.push(casesList[i].recovered)\n                }\n            }\n        }\n        if(str != null && str != \"\")\n        {\n            try{\n            this.state.country = countryList[0];\n            }\n            catch{}\n        }\n\n        let datasetBars = [];\n        let phrase = this.state.phrases[1];\n        for (let index = 0; index < this.state.phrases.length; index++) {\n            if(this.state.phrases[index].lang == this.state.language)\n            {\n                phrase = this.state.phrases[index];   \n            }\n        }\n        document.title = phrase.title;\n\n        if(str===\"\")\n        {\n            datasetBars = [\n                {\n                    label: phrase.totalDeaths,\n                    type: \"line\",\n                    data: deathList,\n                    borderColor: \"#7F171F\",\n                    fill: \"#7F171F\",\n                },\n                {\n                    label: phrase.totalCases,\n                    data: caseList,\n                    type: \"line\",\n                    borderColor:\" #003366\",\n                    fill:\" #003366\",\n                },\n                {\n                    label: phrase.todayCases,\n                    type: \"line\",\n                    borderColor:\"#B67721\",\n                    fill:\"#B67721\",\n                    data: todayCasesList,\n                },\n                {\n                    label: phrase.recovered,\n                    type: \"line\",\n                    borderColor:\"#21B6A8\",\n                    fill:\"#21B6A8\",\n                    data: recoveredList,\n                },\n                {\n                    label: phrase.todayDeaths,\n                    type: \"line\",\n                    borderColor: \"#B6212D\",\n                    fill: \"#B6212D\",\n                    data: todayDeathsList,\n                },\n                {\n                    label: phrase.active,\n                    type: \"line\",\n                    borderColor:\"#177F75\",\n                    fill:\"#177F75\",\n                    data: activeList,\n                }\n            ];\n        }\n        else{\n            datasetBars = [{\n                  label: phrase.totalDeaths,\n                  type: \"bar\",\n                  data: deathList,\n                  backgroundColor: \"#7F171F\",\n                  fill: \"#7F171F\",\n                },\n              {                    \n                  label: phrase.totalCases,\n                  data: caseList,\n                  type: \"bar\",\n                  backgroundColor:\" #003366\",\n                  fill:\" #003366\",\n              },\n              {\n                  label: phrase.todayCases,\n                  type: \"bar\",\n                  backgroundColor:\"#B67721\",\n                  fill:\"#B67721\",\n                  data: todayCasesList,\n              },\n              {\n                  label: phrase.recovered,\n                  type: \"bar\",\n                  backgroundColor:\"#21B6A8\",\n                  fill:\"#21B6A8\",\n                  data: recoveredList,\n              },\n              {\n                  label: phrase.todayDeaths,\n                  type: \"bar\",\n                  backgroundColor: \"#B6212D\",\n                  data: todayDeathsList,\n                  labels: todayDeathsList\n              },\n              {\n                  label: phrase.active,\n                  type: \"bar\",\n                  labels: activeList,\n                  backgroundColor:\"#177F75\",\n                  fill:\"#177F75\",\n                  data: activeList,\n              }\n            ]\n        }\n        \n        \n        try{\n            this.myChart.destroy();\n        }\n        catch{}\n      this.myChart = new Chart(myChartRef, {\n          type: \"line\",\n          data: {\n              //Bring in data\n              labels: timelist,\n              datasets: datasetBars\n          },\n          options: { \n              maintainAspectRatio: false,\n              responsive: true\n          }\n          \n      });\n      this.myChart.canvas.parentNode.style.height = '90vh';\n\n    }\n    getAllCountries()\n    {\n        if(this.state.country != undefined)\n        {\n            window.location.href = '/';\n        }\n        else{\n            alert(this.state.phrase.errorMsg);\n        }\n    }\n      changeLanguage(lang) {\n        this.setState({\n          language:  lang\n        })\n        this.state.language = lang;\n        this.getTimeline();\n      }\n      getLang(){\n          return this.state.language;\n      }\n    render(){\n     return (\n         \n     <div>\n    <h1>{this.state.language === 'en' ? 'Corona Virus Statistics' : 'Статистика за Корона вирусот'}</h1>\n     <div className=\"infoData\">\n         <div>\n         {this.state.language === 'en' ? 'Language:' : 'Јазик:'}\n         \n            <select className=\"infoChild\" onChange={(e)=>this.changeLanguage(e.target.value)}>\n                <option value=\"en\">English</option>\n                <option value=\"mk\">Македонски</option>\n            </select>\n            </div><div>\n            {this.state.language === 'en' ? 'Country:' : 'Држава:'}\n            <select className=\"infoChild\" id=\"countrySelect\" onChange={(e)=>this.renderTableData(e.target.value)}>\n                  {this.state.opts}\n            </select>\n\n            <input type=\"button\" className=\"infoChild\" onClick={(e) => this.getTimeline(this.state.casesList, e.target.value)} value={this.state.language === 'en' ? 'Choose country' : 'Избери држава'} ></input>\n            </div><div>{this.state.language === 'en' ? 'Order by' : 'Сортирај по'}\n            <select className=\"infoChild\" onChange={(e)=>this.getTimeline(e.target.value)}>\n                <option value=\"asc\">{this.state.language === 'en' ? 'Date аscending' : 'Датум растечки'}</option>\n                <option value=\"desc\">{this.state.language === 'en' ? 'Date descending' : 'Датум опаѓачки'}</option>\n            </select>\n            </div>        \n            <input type=\"button\" className=\"infoChild\" onClick={(e) => this.getAllCountries()} value={this.state.language === 'en' ? 'All countries' : 'Сите држави'} ></input>\n\n        </div>\n        <h2>{this.state.country}</h2>\n            <canvas \n                id=\"myChart\"\n                ref={this.chartRef}\n            />\n        </div>\n    )\n    }\n  }\n      \n  export default TimeChart;","import React , {Component} from 'react';\nimport './App.css';\nimport TimeChart from './TimeChart'\n\nclass Time extends Component {\n  \n  state = {\n    country:this.props.match.params\n  }\n\ncomponentDidMount(){\n  const country  = this.props.match.params;\n  this.setCountry(country);\n}\nasync setCountry(country){\n  await this.setState({country:country});\n}\n  render() {\n    return (\n      <div className=\"App\">\n        <TimeChart country={this.state.country} />\n      </div>\n    );\n  }\n}\nexport default Time;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport Time from './Time';\nimport * as serviceWorker from './serviceWorker';\nimport { Route, Link, BrowserRouter as Router } from 'react-router-dom'\nconst routing = (\n    <Router>\n      <div>\n        <Route exact path=\"/\" component={App} />\n        <Route path=\"/timechart/country/:country\" component={Time} />\n      </div>\n    </Router>\n  )\n  ReactDOM.render(routing, document.getElementById('root'))\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}