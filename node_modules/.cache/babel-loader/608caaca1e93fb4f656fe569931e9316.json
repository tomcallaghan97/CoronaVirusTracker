{"ast":null,"code":"var _jsxFileName = \"/Users/tom/Desktop/coronavirus-statistics/src/BarChart.js\";\nimport React, { Component } from 'react';\nimport Chart from \"chart.js\";\n\nclass BarChart extends Component {\n  constructor() {\n    super();\n    this.chartRef = React.createRef();\n    this.state = {\n      casesList: [],\n      country: null,\n      language: 'en',\n      phrases: [{\n        \"lang\": \"en\",\n        \"totalCases\": \"Total cases\",\n        \"totalDeaths\": \"Total deaths\",\n        \"active\": \"Active\",\n        \"recovered\": \"Recovered\",\n        \"todayCases\": \"Today cases\",\n        \"todayDeaths\": \"Today deaths\",\n        \"errorMsg\": \"Please, input a country.\",\n        \"title\": \"Coronavirus Statistics\",\n        \"language\": \"Language\",\n        \"country\": \"Country\"\n      }],\n      phrase: null\n    };\n    this.state.phrase = this.state.phrases[0];\n    document.title = this.state.phrase.title;\n  }\n\n  renderTableData() {\n    fetch('https://coronavirus-monitor.p.rapidapi.com/coronavirus/cases_by_country.php', {\n      headers: {\n        'X-RapidAPI-Host': 'coronavirus-monitor.p.rapidapi.com',\n        'X-RapidAPI-Key': 'd2be6cb091msh3947f8fd6c13878p17991djsnfa2142ace598'\n      }\n    }).then(results => {\n      return results.json();\n    }).then(data => {\n      let casesList = [];\n      let countriesList = [];\n      data.countries_stat.map(c => {\n        return casesList.push({\n          \"cases\": c.cases.replace(',', ''),\n          \"country\": c.country_name,\n          \"deaths\": c.deaths.replace(',', ''),\n          \"recovered\": c.total_recovered.replace(',', ''),\n          \"todayDeaths\": c.new_deaths.replace(',', ''),\n          \"todayCases\": c.new_cases.replace(',', ''),\n          \"active\": c.active_cases.replace(',', '')\n        }), countriesList.push(c.country_name);\n      });\n      this.drawChartJS(casesList);\n      this.setState({\n        casesList: casesList\n      });\n    });\n  }\n\n  componentDidMount() {\n    this.renderTableData();\n  }\n\n  getTimeline() {\n    if (this.state.country !== undefined && this.state.country !== null) {\n      window.location.href = '/timechart/country/' + this.state.country;\n    } else {\n      alert(this.state.phrase.errorMsg);\n    }\n  }\n\n  drawChartJS(casesList, str, orderBy) {\n    if (str == null) {\n      str = \"\";\n    }\n\n    const myChartRef = this.chartRef.current.getContext(\"2d\");\n    let deathList = [];\n    let countryList = [];\n    let caseList = [];\n    let todayDeathsList = [];\n    let todayCasesList = [];\n    let activeList = [];\n    let recoveredList = [];\n\n    switch (orderBy) {\n      case \"cases\":\n        casesList.sort((a, b) => parseInt(a.cases) > parseInt(b.cases) ? -1 : 1);\n        break;\n\n      case \"deaths\":\n        casesList.sort((a, b) => parseInt(a.deaths) > parseInt(b.deaths) ? -1 : 1);\n        break;\n\n      case \"todayCases\":\n        casesList.sort((a, b) => parseInt(a.todayCases) > parseInt(b.todayCases) ? -1 : 1);\n        break;\n\n      case \"todayDeaths\":\n        casesList.sort((a, b) => parseInt(a.todayDeaths) > parseInt(b.todayDeaths) ? -1 : 1);\n        break;\n\n      default:\n        casesList.sort((a, b) => parseInt(a.cases) > parseInt(b.cases) ? -1 : 1);\n        break;\n    }\n\n    for (let i = 0; i < casesList.length; i++) {\n      if (casesList[i].country.toLowerCase().includes(str.toLowerCase()) && i < 24) {\n        deathList.push(casesList[i].deaths);\n        countryList.push(casesList[i].country);\n        caseList.push(casesList[i].cases);\n        todayDeathsList.push(casesList[i].todayDeaths);\n        todayCasesList.push(casesList[i].todayCases);\n        activeList.push(casesList[i].active);\n        recoveredList.push(casesList[i].recovered);\n      }\n    }\n\n    if (str !== null && str !== \"\") {\n      try {\n        this.setState({\n          country: countryList[0]\n        });\n      } catch {}\n    }\n\n    let datasetBars = [];\n    let phrase = this.state.phrases[1];\n\n    for (let index = 0; index < this.state.phrases.length; index++) {\n      if (this.state.phrases[index].lang === this.state.language) {\n        phrase = this.state.phrases[index];\n      }\n    }\n\n    this.setState({\n      phrase: phrase\n    });\n    document.title = phrase.title;\n    let dataType = \"bar\";\n\n    if (str === \"\") {\n      dataType = \"line\";\n    }\n\n    datasetBars = [{\n      label: phrase.totalDeaths,\n      type: dataType,\n      data: deathList,\n      backgroundColor: \"#7F171F\",\n      borderColor: \"#7F171F\",\n      fill: \"#7F171F\"\n    }, {\n      label: phrase.totalCases,\n      data: caseList,\n      type: dataType,\n      backgroundColor: \" #003366\",\n      borderColor: \" #003366\",\n      fill: \" #003366\"\n    }, {\n      label: phrase.todayCases,\n      type: dataType,\n      backgroundColor: \"#B67721\",\n      borderColor: \"#B67721\",\n      fill: \"#B67721\",\n      data: todayCasesList\n    }, {\n      label: phrase.todayDeaths,\n      type: dataType,\n      backgroundColor: \"#B6212D\",\n      borderColor: \"#B6212D\",\n      data: todayDeathsList,\n      labels: todayDeathsList\n    }];\n\n    try {\n      this.myChart.destroy();\n    } catch {}\n\n    this.myChart = new Chart(myChartRef, {\n      type: \"bar\",\n      data: {\n        labels: countryList,\n        datasets: datasetBars\n      },\n      options: {\n        maintainAspectRatio: false,\n        responsive: true\n      }\n    });\n    this.myChart.canvas.parentNode.style.height = '70vh';\n  }\n\n  async changeLanguage(lang) {\n    await this.setState({\n      language: lang\n    });\n    this.drawChartJS(this.state.casesList);\n  }\n\n  getLang() {\n    return this.state.language;\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194\n      },\n      __self: this\n    }, this.state.phrase.title), React.createElement(\"div\", {\n      className: \"infoData\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"infoData1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196\n      },\n      __self: this\n    }, this.state.phrase.country, React.createElement(\"input\", {\n      className: \"infoChild\",\n      placeholder: 'Type a country',\n      onChange: e => this.drawChartJS(this.state.casesList, e.target.value),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"infoData2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200\n      },\n      __self: this\n    }, 'Order by', React.createElement(\"select\", {\n      className: \"infoChild\",\n      onChange: e => this.drawChartJS(this.state.casesList, \"\", e.target.value),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201\n      },\n      __self: this\n    }, React.createElement(\"option\", {\n      value: \"cases\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202\n      },\n      __self: this\n    }, this.state.phrase.totalCases), React.createElement(\"option\", {\n      value: \"deaths\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 203\n      },\n      __self: this\n    }, this.state.phrase.totalDeaths), React.createElement(\"option\", {\n      value: \"todayCases\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 204\n      },\n      __self: this\n    }, 'Number of today cases'), React.createElement(\"option\", {\n      value: \"todayDeaths\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205\n      },\n      __self: this\n    }, 'Number of today deaths')))), React.createElement(\"canvas\", {\n      id: \"myChart\",\n      ref: this.chartRef,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default BarChart;","map":{"version":3,"sources":["/Users/tom/Desktop/coronavirus-statistics/src/BarChart.js"],"names":["React","Component","Chart","BarChart","constructor","chartRef","createRef","state","casesList","country","language","phrases","phrase","document","title","renderTableData","fetch","headers","then","results","json","data","countriesList","countries_stat","map","c","push","cases","replace","country_name","deaths","total_recovered","new_deaths","new_cases","active_cases","drawChartJS","setState","componentDidMount","getTimeline","undefined","window","location","href","alert","errorMsg","str","orderBy","myChartRef","current","getContext","deathList","countryList","caseList","todayDeathsList","todayCasesList","activeList","recoveredList","sort","a","b","parseInt","todayCases","todayDeaths","i","length","toLowerCase","includes","active","recovered","datasetBars","index","lang","dataType","label","totalDeaths","type","backgroundColor","borderColor","fill","totalCases","labels","myChart","destroy","datasets","options","maintainAspectRatio","responsive","canvas","parentNode","style","height","changeLanguage","getLang","render","e","target","value"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport Chart from \"chart.js\";\n\n\nclass BarChart extends Component {\n    myChart;\n    chartRef = React.createRef();\n    constructor(){\n        super();\n        this.state={\n            casesList:[],\n            country: null,\n            language: 'en',\n            phrases: [{\"lang\":\"en\",\"totalCases\":\"Total cases\", \"totalDeaths\": \"Total deaths\", \"active\":\"Active\",\"recovered\":\"Recovered\",\"todayCases\":\"Today cases\",\"todayDeaths\":\"Today deaths\",  \"errorMsg\":\"Please, input a country.\",\"title\":\"Coronavirus Statistics\",\"language\": \"Language\",\"country\":\"Country\"}],\n            phrase: null\n        };\n        this.state.phrase = this.state.phrases[0];\n        document.title = this.state.phrase.title;\n    }\n    \n     renderTableData() {\n        fetch('https://coronavirus-monitor.p.rapidapi.com/coronavirus/cases_by_country.php',\n        {  \n            headers: {\n              'X-RapidAPI-Host': 'coronavirus-monitor.p.rapidapi.com', \n              'X-RapidAPI-Key': 'd2be6cb091msh3947f8fd6c13878p17991djsnfa2142ace598'\n            }\n        })\n            .then(results=>{\n            return results.json();\n        })\n        .then(data => {\n            let casesList = [];\n            let countriesList = [];\n            data.countries_stat.map((c)=>{\n                return(\n                    casesList.push({\"cases\": c.cases.replace(',',''), \"country\":c.country_name, \"deaths\":c.deaths.replace(',',''), \"recovered\":c.total_recovered.replace(',',''), \"todayDeaths\":c.new_deaths.replace(',',''), \"todayCases\":c.new_cases.replace(',',''), \"active\":c.active_cases.replace(',','')}),\n                    countriesList.push(c.country_name)\n                )\n            });\n            this.drawChartJS(casesList);            \n            this.setState({casesList: casesList});\n        })\n     }\n     componentDidMount() {\n      this.renderTableData();\n    }\n    getTimeline()\n    {\n        if(this.state.country !== undefined && this.state.country !== null)\n        {\n            window.location.href = '/timechart/country/'+this.state.country;\n        }\n        else{\n            alert(this.state.phrase.errorMsg);\n        }\n    }\n    drawChartJS(casesList, str, orderBy){\n        if(str == null)\n        {\n            str=\"\";\n        }\n        const myChartRef = this.chartRef.current.getContext(\"2d\");\n        let deathList = [];\n        let countryList = [];\n        let caseList = [];\n        let todayDeathsList = [];\n        let todayCasesList = [];\n        let activeList = [];\n        let recoveredList = [];\n        \n        switch(orderBy){\n            case \"cases\":\n                casesList.sort((a, b) => (parseInt(a.cases) > parseInt(b.cases)) ? -1 : 1);\n                break;\n            case \"deaths\":\n                casesList.sort((a, b) => (parseInt(a.deaths) > parseInt(b.deaths)) ? -1 : 1);\n                break;\n            case \"todayCases\":\n                casesList.sort((a, b) => (parseInt(a.todayCases) > parseInt(b.todayCases)) ? -1 : 1);\n                break;\n            case \"todayDeaths\":\n                casesList.sort((a, b) => (parseInt(a.todayDeaths) > parseInt(b.todayDeaths)) ? -1 : 1);\n                break;\n            default:\n                casesList.sort((a, b) => (parseInt(a.cases) > parseInt(b.cases)) ? -1 : 1);\n                break;\n        }\n\n        for(let i = 0; i<casesList.length;i++)\n        {\n            if(casesList[i].country.toLowerCase().includes(str.toLowerCase()) && i < 24){\n                deathList.push(casesList[i].deaths);\n                countryList.push(casesList[i].country);\n                caseList.push(casesList[i].cases);\n                todayDeathsList.push(casesList[i].todayDeaths);\n                todayCasesList.push(casesList[i].todayCases);\n                activeList.push(casesList[i].active);\n                recoveredList.push(casesList[i].recovered)\n            }\n        }\n        if(str !== null && str !== \"\")\n        {\n            try{\n                this.setState({\n                    country:  countryList[0]\n                  })\n            }\n            catch{}\n        }\n        let datasetBars = [];\n        let phrase = this.state.phrases[1];\n        for (let index = 0; index < this.state.phrases.length; index++) {\n            if(this.state.phrases[index].lang === this.state.language)\n            {\n                phrase = this.state.phrases[index];   \n            }\n        }\n        this.setState({\n            phrase:  phrase\n        })      \n        document.title = phrase.title;\n\n        let dataType = \"bar\";\n        if(str===\"\")\n        {\n            dataType = \"line\";\n        }\n        datasetBars = [{\n            label: phrase.totalDeaths,\n            type: dataType,\n            data: deathList,\n            backgroundColor: \"#7F171F\",\n            borderColor: \"#7F171F\",\n            fill: \"#7F171F\",\n          },\n        {                    \n            label: phrase.totalCases,\n            data: caseList,\n            type: dataType,\n            backgroundColor:\" #003366\",\n            borderColor:\" #003366\",\n            fill:\" #003366\",\n        },\n        {\n            label: phrase.todayCases,\n            type: dataType,\n            backgroundColor:\"#B67721\",\n            borderColor:\"#B67721\",\n            fill:\"#B67721\",\n            data: todayCasesList,\n        },\n        {\n            label: phrase.todayDeaths,\n            type: dataType,\n            backgroundColor: \"#B6212D\",\n            borderColor: \"#B6212D\",\n            data: todayDeathsList,\n            labels: todayDeathsList\n        }\n      ];\n        \n        try{\n            this.myChart.destroy();\n        }\n        catch{}\n\n      this.myChart = new Chart(myChartRef, {\n          type: \"bar\",\n          data: {\n              labels: countryList,\n              datasets: datasetBars\n          },\n          options: { \n              maintainAspectRatio: false,\n              responsive: true\n          }\n      });\n      this.myChart.canvas.parentNode.style.height = '70vh';\n    }\n    \n      async changeLanguage(lang) {\n        await this.setState({\n          language:  lang\n        })\n        this.drawChartJS(this.state.casesList);\n      }\n      getLang(){\n          return this.state.language;\n      }\n    render(){\n     return (\n     <div>\n    <h1>{this.state.phrase.title}</h1>\n    <div className= \"infoData\">\n        <div className=\"infoData1\">\n            {this.state.phrase.country}\n            <input className=\"infoChild\" placeholder={'Type a country'} onChange={(e) => this.drawChartJS(this.state.casesList, e.target.value)} ></input>\n        </div>\n        <div className=\"infoData2\">{'Order by'}\n            <select className=\"infoChild\" onChange={(e)=>this.drawChartJS(this.state.casesList,\"\",e.target.value)}>\n                <option value=\"cases\">{this.state.phrase.totalCases}</option>\n                <option value=\"deaths\">{this.state.phrase.totalDeaths}</option>\n                <option value=\"todayCases\">{'Number of today cases'}</option>\n                <option value=\"todayDeaths\">{'Number of today deaths'}</option>\n            </select>\n        </div>\n    </div>\n            <canvas \n                id=\"myChart\"\n                ref={this.chartRef}/>\n        </div>\n    )\n    }\n  }\n      \n  export default BarChart;"]},"metadata":{},"sourceType":"module"}