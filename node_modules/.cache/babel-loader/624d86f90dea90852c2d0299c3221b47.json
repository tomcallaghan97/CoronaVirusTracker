{"ast":null,"code":"var _jsxFileName = \"/Users/tom/Desktop/coronavirus-statistics/src/TimeChart.js\";\nimport React, { Component } from 'react';\nimport Chart from \"chart.js\";\n\nclass TimeChart extends Component {\n  constructor() {\n    super();\n    this.chartRef = React.createRef();\n    this.state = {\n      casesList: [],\n      country: null,\n      language: 'en',\n      phrase: null,\n      opts: [],\n      phrases: [{\n        \"lang\": \"mk\",\n        \"language\": \"Јазик\",\n        \"country\": \"Држава\",\n        \"title\": \"Корона Статистика\",\n        \"errorMsg\": \"Ве молиме, внесете држава.\",\n        \"totalCases\": \"Вкупно случаи\",\n        \"totalDeaths\": \"Вкупно смртни случаи\",\n        \"active\": \"Активни\",\n        \"recovered\": \"Излечени\",\n        \"todayCases\": \"Денешни случаи\",\n        \"todayDeaths\": \"Денешни смртни случаи\"\n      }, {\n        \"lang\": \"en\",\n        \"totalCases\": \"Total cases\",\n        \"totalDeaths\": \"Total deaths\",\n        \"active\": \"Active\",\n        \"recovered\": \"Recovered\",\n        \"todayCases\": \"Today cases\",\n        \"todayDeaths\": \"Today deaths\",\n        \"errorMsg\": \"Please, input a country.\",\n        \"title\": \"Coronavirus Statistics\",\n        \"language\": \"Language\",\n        \"country\": \"Country\"\n      }]\n    };\n    this.setCountry();\n    let phrase = this.state.phrases[1];\n    document.title = phrase.title;\n    this.state.phrase = phrase;\n  }\n\n  renderTableData(country, orderBy) {\n    this.state.country = country; //       fetch('https://coronavirus-19-api.herokuapp.com/countries')\n\n    fetch('https://coronavirus-monitor.p.rapidapi.com/coronavirus/cases_by_particular_country.php?country=' + country, {\n      headers: {\n        'X-RapidAPI-Host': 'coronavirus-monitor.p.rapidapi.com',\n        'X-RapidAPI-Key': process.env.REACT_APP_API_KEY\n      }\n    }).then(results => {\n      return results.json();\n    }).then(data => {\n      let casesList = [];\n      let countriesList = [];\n      data.stat_by_country.map(c => {\n        try {\n          c.total_cases = c.total_cases.replace(',', '');\n          c.total_deaths = c.total_deaths.replace(',', '');\n          c.total_recovered = c.total_recovered.replace(',', '');\n          c.new_deaths = c.new_deaths.replace(',', '');\n          c.new_cases = c.new_cases.replace(',', '');\n          c.active_cases = c.active_cases.replace(',', '');\n        } catch {}\n\n        return casesList.push({\n          \"cases\": c.total_cases,\n          \"country\": c.country_name,\n          \"deaths\": c.total_deaths,\n          \"recovered\": c.total_recovered,\n          \"todayDeaths\": c.new_deaths,\n          \"todayCases\": c.new_cases,\n          \"active\": c.active_cases,\n          \"time\": c.record_date\n        }), countriesList.push(c.country_name);\n      });\n      this.drawChartJS(casesList, \"\", orderBy);\n      /*            data.stat_by_country.map((c)=>{  \n                   return(\n                       <tr key={c.country_name}>\n                           <td>{c.country_name}</td>\n                           <td>{c.cases}</td>\n                           <td>{c.new_cases}</td>\n                           <td class=\"death\">{c.deaths}</td>\n                           <td>{c.new_deaths}</td>\n                           <td class=\"recovered\">{c.total_recovered}</td>\n                           <td>{c.active_cases}</td>\n                       </tr>\n                      )\n                  });*/\n\n      this.setState({\n        casesList: casesList\n      });\n    });\n  }\n\n  componentDidMount() {\n    this.renderTableData(this.props.country.country); //        this.setCountry();    \n  }\n\n  getTimeline(orderBy) {\n    if (this.state.country != undefined) {\n      this.renderTableData(this.state.country, orderBy);\n    } else {\n      alert(this.state.phrase.errorMsg);\n    }\n  }\n\n  setCountry() {\n    let opts = [];\n    let countries = [];\n    fetch('https://coronavirus-monitor.p.rapidapi.com/coronavirus/cases_by_country.php', {\n      headers: {\n        'X-RapidAPI-Host': 'coronavirus-monitor.p.rapidapi.com',\n        'X-RapidAPI-Key': 'e9843df6f7mshaa54667ec07baf1p12224cjsn04cf86d86a81'\n      }\n    }).then(results => {\n      return results.json();\n    }).then(data => {\n      data.countries_stat.map(c => {\n        countries.push(c.country_name);\n      });\n      countries.sort();\n      countries.forEach(c => {\n        if (this.props.country.country == c) {\n          opts.push(React.createElement(\"option\", {\n            key: c,\n            selected: true,\n            value: c,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 115\n            },\n            __self: this\n          }, \" \", c, \" \"));\n        } else {\n          opts.push(React.createElement(\"option\", {\n            key: c,\n            value: c,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 118\n            },\n            __self: this\n          }, \" \", c, \" \"));\n        }\n      });\n      this.state.opts = opts;\n    });\n  }\n\n  drawChartJS(casesList, str, orderBy) {\n    if (str == null) {\n      str = \"\";\n    }\n\n    const myChartRef = this.chartRef.current.getContext(\"2d\");\n    let deathList = [];\n    let countryList = [];\n    let timelist = [];\n    let caseList = [];\n    let todayDeathsList = [];\n    let todayCasesList = [];\n    let activeList = [];\n    let recoveredList = [];\n\n    switch (orderBy) {\n      case \"asc\":\n        casesList.sort((a, b) => new Date(a) > new Date(b) ? -1 : 1);\n        break;\n\n      case \"desc\":\n        casesList.sort((a, b) => new Date(a) > new Date(b) ? 1 : -1);\n        break;\n\n      default:\n        casesList.sort((a, b) => new Date(a) > new Date(b) ? -1 : 1);\n        break;\n    }\n\n    for (let i = 0; i < casesList.length; i++) {\n      if (casesList[i].country.toLowerCase().includes(str.toLowerCase())) {\n        let date = new Date(casesList[i].time);\n        const ye = new Intl.DateTimeFormat('en', {\n          year: 'numeric'\n        }).format(date);\n        const mo = new Intl.DateTimeFormat('en', {\n          month: 'short'\n        }).format(date);\n        const da = new Intl.DateTimeFormat('en', {\n          day: '2-digit'\n        }).format(date);\n        timelist.push(da + \".\" + mo);\n\n        if (true) {\n          deathList.push(casesList[i].deaths);\n          countryList.push(casesList[i].country);\n          caseList.push(casesList[i].cases);\n          todayDeathsList.push(casesList[i].todayDeaths);\n          todayCasesList.push(casesList[i].todayCases);\n          activeList.push(casesList[i].active);\n          recoveredList.push(casesList[i].recovered);\n        }\n      }\n    }\n\n    if (str != null && str != \"\") {\n      try {\n        this.state.country = countryList[0];\n      } catch {}\n    }\n\n    let datasetBars = [];\n    let phrase = this.state.phrases[1];\n\n    for (let index = 0; index < this.state.phrases.length; index++) {\n      if (this.state.phrases[index].lang == this.state.language) {\n        phrase = this.state.phrases[index];\n      }\n    }\n\n    document.title = phrase.title;\n\n    if (str === \"\") {\n      datasetBars = [{\n        label: phrase.totalDeaths,\n        type: \"line\",\n        data: deathList,\n        borderColor: \"#7F171F\",\n        fill: \"#7F171F\"\n      }, {\n        label: phrase.totalCases,\n        data: caseList,\n        type: \"line\",\n        borderColor: \" #003366\",\n        fill: \" #003366\"\n      }, {\n        label: phrase.todayCases,\n        type: \"line\",\n        borderColor: \"#B67721\",\n        fill: \"#B67721\",\n        data: todayCasesList\n      }, {\n        label: phrase.recovered,\n        type: \"line\",\n        borderColor: \"#21B6A8\",\n        fill: \"#21B6A8\",\n        data: recoveredList\n      }, {\n        label: phrase.todayDeaths,\n        type: \"line\",\n        borderColor: \"#B6212D\",\n        fill: \"#B6212D\",\n        data: todayDeathsList\n      }, {\n        label: phrase.active,\n        type: \"line\",\n        borderColor: \"#177F75\",\n        fill: \"#177F75\",\n        data: activeList\n      }];\n    } else {\n      datasetBars = [{\n        label: phrase.totalDeaths,\n        type: \"bar\",\n        data: deathList,\n        backgroundColor: \"#7F171F\",\n        fill: \"#7F171F\"\n      }, {\n        label: phrase.totalCases,\n        data: caseList,\n        type: \"bar\",\n        backgroundColor: \" #003366\",\n        fill: \" #003366\"\n      }, {\n        label: phrase.todayCases,\n        type: \"bar\",\n        backgroundColor: \"#B67721\",\n        fill: \"#B67721\",\n        data: todayCasesList\n      }, {\n        label: phrase.recovered,\n        type: \"bar\",\n        backgroundColor: \"#21B6A8\",\n        fill: \"#21B6A8\",\n        data: recoveredList\n      }, {\n        label: phrase.todayDeaths,\n        type: \"bar\",\n        backgroundColor: \"#B6212D\",\n        data: todayDeathsList,\n        labels: todayDeathsList\n      }, {\n        label: phrase.active,\n        type: \"bar\",\n        labels: activeList,\n        backgroundColor: \"#177F75\",\n        fill: \"#177F75\",\n        data: activeList\n      }];\n    }\n\n    try {\n      this.myChart.destroy();\n    } catch {}\n\n    this.myChart = new Chart(myChartRef, {\n      type: \"line\",\n      data: {\n        //Bring in data\n        labels: timelist,\n        datasets: datasetBars\n      },\n      options: {\n        maintainAspectRatio: false,\n        responsive: true\n      }\n    });\n    this.myChart.canvas.parentNode.style.height = '90vh';\n  }\n\n  getAllCountries() {\n    if (this.state.country != undefined) {\n      window.location.href = '/';\n    } else {\n      alert(this.state.phrase.errorMsg);\n    }\n  }\n\n  changeLanguage(lang) {\n    this.setState({\n      language: lang\n    });\n    this.state.language = lang;\n    this.getTimeline();\n  }\n\n  getLang() {\n    return this.state.language;\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 330\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 331\n      },\n      __self: this\n    }, this.state.language === 'en' ? 'Corona Virus Statistics' : 'Статистика за Корона вирусот'), React.createElement(\"div\", {\n      className: \"infoData\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 332\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 333\n      },\n      __self: this\n    }, this.state.language === 'en' ? 'Language:' : 'Јазик:', React.createElement(\"select\", {\n      className: \"infoChild\",\n      onChange: e => this.changeLanguage(e.target.value),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 336\n      },\n      __self: this\n    }, React.createElement(\"option\", {\n      value: \"en\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 337\n      },\n      __self: this\n    }, \"English\"), React.createElement(\"option\", {\n      value: \"mk\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 338\n      },\n      __self: this\n    }, \"\\u041C\\u0430\\u043A\\u0435\\u0434\\u043E\\u043D\\u0441\\u043A\\u0438\"))), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 340\n      },\n      __self: this\n    }, this.state.language === 'en' ? 'Country:' : 'Држава:', React.createElement(\"select\", {\n      className: \"infoChild\",\n      id: \"countrySelect\",\n      onChange: e => this.renderTableData(e.target.value),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 342\n      },\n      __self: this\n    }, this.state.opts), React.createElement(\"input\", {\n      type: \"button\",\n      className: \"infoChild\",\n      onClick: e => this.getTimeline(this.state.casesList, e.target.value),\n      value: this.state.language === 'en' ? 'Choose country' : 'Избери држава',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 346\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 347\n      },\n      __self: this\n    }, this.state.language === 'en' ? 'Order by' : 'Сортирај по', React.createElement(\"select\", {\n      className: \"infoChild\",\n      onChange: e => this.getTimeline(e.target.value),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 348\n      },\n      __self: this\n    }, React.createElement(\"option\", {\n      value: \"asc\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 349\n      },\n      __self: this\n    }, this.state.language === 'en' ? 'Date аscending' : 'Датум растечки'), React.createElement(\"option\", {\n      value: \"desc\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 350\n      },\n      __self: this\n    }, this.state.language === 'en' ? 'Date descending' : 'Датум опаѓачки'))), React.createElement(\"input\", {\n      type: \"button\",\n      className: \"infoChild\",\n      onClick: e => this.getAllCountries(),\n      value: this.state.language === 'en' ? 'All countries' : 'Сите држави',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 353\n      },\n      __self: this\n    })), React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 356\n      },\n      __self: this\n    }, this.state.country), React.createElement(\"canvas\", {\n      id: \"myChart\",\n      ref: this.chartRef,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 357\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default TimeChart;","map":{"version":3,"sources":["/Users/tom/Desktop/coronavirus-statistics/src/TimeChart.js"],"names":["React","Component","Chart","TimeChart","constructor","chartRef","createRef","state","casesList","country","language","phrase","opts","phrases","setCountry","document","title","renderTableData","orderBy","fetch","headers","process","env","REACT_APP_API_KEY","then","results","json","data","countriesList","stat_by_country","map","c","total_cases","replace","total_deaths","total_recovered","new_deaths","new_cases","active_cases","push","country_name","record_date","drawChartJS","setState","componentDidMount","props","getTimeline","undefined","alert","errorMsg","countries","countries_stat","sort","forEach","str","myChartRef","current","getContext","deathList","countryList","timelist","caseList","todayDeathsList","todayCasesList","activeList","recoveredList","a","b","Date","i","length","toLowerCase","includes","date","time","ye","Intl","DateTimeFormat","year","format","mo","month","da","day","deaths","cases","todayDeaths","todayCases","active","recovered","datasetBars","index","lang","label","totalDeaths","type","borderColor","fill","totalCases","backgroundColor","labels","myChart","destroy","datasets","options","maintainAspectRatio","responsive","canvas","parentNode","style","height","getAllCountries","window","location","href","changeLanguage","getLang","render","e","target","value"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport Chart from \"chart.js\";\n\n\nclass TimeChart extends Component {\n    myChart;\n    chartRef = React.createRef();\n    constructor(){\n        super();\n        this.state={\n            casesList:[],\n            country: null,\n            language: 'en',\n            phrase: null,\n            opts: [],\n            phrases: [{\"lang\": \"mk\",\"language\": \"Јазик\",\"country\":\"Држава\", \"title\": \"Корона Статистика\", \"errorMsg\":\"Ве молиме, внесете држава.\", \"totalCases\":\"Вкупно случаи\", \"totalDeaths\":\"Вкупно смртни случаи\", \"active\":\"Активни\",\"recovered\":\"Излечени\",\"todayCases\":\"Денешни случаи\",\"todayDeaths\":\"Денешни смртни случаи\"}, {\"lang\":\"en\",\"totalCases\":\"Total cases\", \"totalDeaths\": \"Total deaths\", \"active\":\"Active\",\"recovered\":\"Recovered\",\"todayCases\":\"Today cases\",\"todayDeaths\":\"Today deaths\",  \"errorMsg\":\"Please, input a country.\",\"title\":\"Coronavirus Statistics\",\"language\": \"Language\",\"country\":\"Country\"}],\n        };\n        this.setCountry();\n        \n        let phrase = this.state.phrases[1];\n        document.title = phrase.title;\n        this.state.phrase = phrase;\n\n    }\n    \n     renderTableData(country, orderBy) {\n         this.state.country = country;\n //       fetch('https://coronavirus-19-api.herokuapp.com/countries')\n        fetch('https://coronavirus-monitor.p.rapidapi.com/coronavirus/cases_by_particular_country.php?country='+country,\n        {  \n            headers: {\n              'X-RapidAPI-Host': 'coronavirus-monitor.p.rapidapi.com', \n              'X-RapidAPI-Key': process.env.REACT_APP_API_KEY\n            }\n        })\n            .then(results=>{\n            return results.json();\n        })\n        .then(data => {\n            \n            let casesList = [];\n            let countriesList = [];\n            data.stat_by_country.map((c)=>{\n                \n                try{\n                    c.total_cases = c.total_cases.replace(',','');\n                    c.total_deaths = c.total_deaths.replace(',','');\n                    c.total_recovered = c.total_recovered.replace(',','');\n                    c.new_deaths = c.new_deaths.replace(',','');\n                    c.new_cases = c.new_cases.replace(',','');\n                    c.active_cases = c.active_cases.replace(',','');\n                }catch{\n                    \n                }\n                return(\n                    casesList.push({\"cases\": c.total_cases, \"country\":c.country_name, \"deaths\":c.total_deaths, \"recovered\":c.total_recovered, \"todayDeaths\":c.new_deaths, \"todayCases\":c.new_cases, \"active\":c.active_cases, \"time\":c.record_date}),\n                    countriesList.push(c.country_name)\n                )\n            });\n            this.drawChartJS(casesList, \"\", orderBy);\n/*            data.stat_by_country.map((c)=>{  \n             return(\n                 <tr key={c.country_name}>\n                     <td>{c.country_name}</td>\n                     <td>{c.cases}</td>\n                     <td>{c.new_cases}</td>\n                     <td class=\"death\">{c.deaths}</td>\n                     <td>{c.new_deaths}</td>\n                     <td class=\"recovered\">{c.total_recovered}</td>\n                     <td>{c.active_cases}</td>\n                 </tr>\n                )\n            });*/   \n            \n            this.setState({casesList: casesList});\n        })\n     }\n     componentDidMount() {\n        this.renderTableData(this.props.country.country);  \n//        this.setCountry();    \n    }\n    getTimeline(orderBy)\n    {\n        if(this.state.country != undefined)\n        {        \n            this.renderTableData(this.state.country, orderBy);  \n        }\n        else{\n            alert(this.state.phrase.errorMsg);\n        }\n    }\n\n    setCountry()\n    {\n        let opts = []; \n        let countries = [];\n        fetch('https://coronavirus-monitor.p.rapidapi.com/coronavirus/cases_by_country.php',\n        {  \n            headers: {\n              'X-RapidAPI-Host': 'coronavirus-monitor.p.rapidapi.com', \n              'X-RapidAPI-Key': 'e9843df6f7mshaa54667ec07baf1p12224cjsn04cf86d86a81'\n            }\n        })\n            .then(results=>{\n            return results.json();\n        })\n        .then(data => {\n            data.countries_stat.map((c)=>{\n                countries.push(c.country_name);\n            });\n            countries.sort();\n            countries.forEach(c => {\n                if(this.props.country.country == c)\n                    {\n                        opts.push(<option key= {c} selected value={c}> {c} </option>);    \n                    }\n                    else{\n                        opts.push(<option key= {c} value={c}> {c} </option>); \n                    }\n            });\n            this.state.opts = opts;\n    \n        })   \n    }\n    drawChartJS(casesList, str, orderBy){\n        if(str == null)\n        {\n            str=\"\";\n        }\n        \n        const myChartRef = this.chartRef.current.getContext(\"2d\");\n        let deathList = [];\n        let countryList = [];\n        let timelist = [];\n        let caseList = [];\n        let todayDeathsList = [];\n        let todayCasesList = [];\n        let activeList = [];\n        let recoveredList = [];\n        \n        switch(orderBy){\n            case \"asc\":\n                casesList.sort((a, b) => (new Date(a)>new Date(b)) ? -1 : 1);\n                break;\n            case \"desc\":\n                casesList.sort((a, b) => (new Date(a)>new Date(b)) ? 1 : -1);\n                break;\n            default:\n                casesList.sort((a, b) => (new Date(a)>new Date(b)) ? -1 : 1);\n                break;\n        }\n\n        for(let i = 0; i<casesList.length;i++)\n        {\n            if(casesList[i].country.toLowerCase().includes(str.toLowerCase())){\n\n                let date = new Date(casesList[i].time);\n                const ye = new Intl.DateTimeFormat('en', { year: 'numeric' }).format(date)\n                const mo = new Intl.DateTimeFormat('en', { month: 'short' }).format(date)\n                const da = new Intl.DateTimeFormat('en', { day: '2-digit' }).format(date)\n\n                timelist.push(da+\".\"+mo);\n                if(true){\n                deathList.push(casesList[i].deaths);\n                countryList.push(casesList[i].country);\n                caseList.push(casesList[i].cases);\n                todayDeathsList.push(casesList[i].todayDeaths);\n                todayCasesList.push(casesList[i].todayCases);\n                activeList.push(casesList[i].active);\n                recoveredList.push(casesList[i].recovered)\n                }\n            }\n        }\n        if(str != null && str != \"\")\n        {\n            try{\n            this.state.country = countryList[0];\n            }\n            catch{}\n        }\n\n        let datasetBars = [];\n        let phrase = this.state.phrases[1];\n        for (let index = 0; index < this.state.phrases.length; index++) {\n            if(this.state.phrases[index].lang == this.state.language)\n            {\n                phrase = this.state.phrases[index];   \n            }\n        }\n        document.title = phrase.title;\n\n        if(str===\"\")\n        {\n            datasetBars = [\n                {\n                    label: phrase.totalDeaths,\n                    type: \"line\",\n                    data: deathList,\n                    borderColor: \"#7F171F\",\n                    fill: \"#7F171F\",\n                },\n                {\n                    label: phrase.totalCases,\n                    data: caseList,\n                    type: \"line\",\n                    borderColor:\" #003366\",\n                    fill:\" #003366\",\n                },\n                {\n                    label: phrase.todayCases,\n                    type: \"line\",\n                    borderColor:\"#B67721\",\n                    fill:\"#B67721\",\n                    data: todayCasesList,\n                },\n                {\n                    label: phrase.recovered,\n                    type: \"line\",\n                    borderColor:\"#21B6A8\",\n                    fill:\"#21B6A8\",\n                    data: recoveredList,\n                },\n                {\n                    label: phrase.todayDeaths,\n                    type: \"line\",\n                    borderColor: \"#B6212D\",\n                    fill: \"#B6212D\",\n                    data: todayDeathsList,\n                },\n                {\n                    label: phrase.active,\n                    type: \"line\",\n                    borderColor:\"#177F75\",\n                    fill:\"#177F75\",\n                    data: activeList,\n                }\n            ];\n        }\n        else{\n            datasetBars = [{\n                  label: phrase.totalDeaths,\n                  type: \"bar\",\n                  data: deathList,\n                  backgroundColor: \"#7F171F\",\n                  fill: \"#7F171F\",\n                },\n              {                    \n                  label: phrase.totalCases,\n                  data: caseList,\n                  type: \"bar\",\n                  backgroundColor:\" #003366\",\n                  fill:\" #003366\",\n              },\n              {\n                  label: phrase.todayCases,\n                  type: \"bar\",\n                  backgroundColor:\"#B67721\",\n                  fill:\"#B67721\",\n                  data: todayCasesList,\n              },\n              {\n                  label: phrase.recovered,\n                  type: \"bar\",\n                  backgroundColor:\"#21B6A8\",\n                  fill:\"#21B6A8\",\n                  data: recoveredList,\n              },\n              {\n                  label: phrase.todayDeaths,\n                  type: \"bar\",\n                  backgroundColor: \"#B6212D\",\n                  data: todayDeathsList,\n                  labels: todayDeathsList\n              },\n              {\n                  label: phrase.active,\n                  type: \"bar\",\n                  labels: activeList,\n                  backgroundColor:\"#177F75\",\n                  fill:\"#177F75\",\n                  data: activeList,\n              }\n            ]\n        }\n        \n        \n        try{\n            this.myChart.destroy();\n        }\n        catch{}\n      this.myChart = new Chart(myChartRef, {\n          type: \"line\",\n          data: {\n              //Bring in data\n              labels: timelist,\n              datasets: datasetBars\n          },\n          options: { \n              maintainAspectRatio: false,\n              responsive: true\n          }\n          \n      });\n      this.myChart.canvas.parentNode.style.height = '90vh';\n\n    }\n    getAllCountries()\n    {\n        if(this.state.country != undefined)\n        {\n            window.location.href = '/';\n        }\n        else{\n            alert(this.state.phrase.errorMsg);\n        }\n    }\n      changeLanguage(lang) {\n        this.setState({\n          language:  lang\n        })\n        this.state.language = lang;\n        this.getTimeline();\n      }\n      getLang(){\n          return this.state.language;\n      }\n    render(){\n     return (\n         \n     <div>\n    <h1>{this.state.language === 'en' ? 'Corona Virus Statistics' : 'Статистика за Корона вирусот'}</h1>\n     <div className=\"infoData\">\n         <div>\n         {this.state.language === 'en' ? 'Language:' : 'Јазик:'}\n         \n            <select className=\"infoChild\" onChange={(e)=>this.changeLanguage(e.target.value)}>\n                <option value=\"en\">English</option>\n                <option value=\"mk\">Македонски</option>\n            </select>\n            </div><div>\n            {this.state.language === 'en' ? 'Country:' : 'Држава:'}\n            <select className=\"infoChild\" id=\"countrySelect\" onChange={(e)=>this.renderTableData(e.target.value)}>\n                  {this.state.opts}\n            </select>\n\n            <input type=\"button\" className=\"infoChild\" onClick={(e) => this.getTimeline(this.state.casesList, e.target.value)} value={this.state.language === 'en' ? 'Choose country' : 'Избери држава'} ></input>\n            </div><div>{this.state.language === 'en' ? 'Order by' : 'Сортирај по'}\n            <select className=\"infoChild\" onChange={(e)=>this.getTimeline(e.target.value)}>\n                <option value=\"asc\">{this.state.language === 'en' ? 'Date аscending' : 'Датум растечки'}</option>\n                <option value=\"desc\">{this.state.language === 'en' ? 'Date descending' : 'Датум опаѓачки'}</option>\n            </select>\n            </div>        \n            <input type=\"button\" className=\"infoChild\" onClick={(e) => this.getAllCountries()} value={this.state.language === 'en' ? 'All countries' : 'Сите држави'} ></input>\n\n        </div>\n        <h2>{this.state.country}</h2>\n            <canvas \n                id=\"myChart\"\n                ref={this.chartRef}\n            />\n        </div>\n    )\n    }\n  }\n      \n  export default TimeChart;"]},"metadata":{},"sourceType":"module"}